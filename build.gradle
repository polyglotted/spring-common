apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'io.polyglotted'
version = '5.0.4'
sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
}
ext {
    attoParserVersion = '2.0.4.RELEASE'
    awsCommonVersion = '1.11.289'
    base64Version = '2.3.9'
    classmateVersion = '1.3.1'
    hamcrestVersion = '1.3'
    hibernateVersion = '6.0.7.Final'
    jasyptVersion = '1.9.2'
    jasyptSpringVersion = '1.18'
    javassistVersion = '3.20.0-GA'
    jbossLoggingVersion = '3.3.0.Final'
    junitVersion = '4.12'
    junitParamsVersion = '1.1.1'
    lombokVersion = '1.16.20'
    ognlVersion = '3.1.12'
    springBootVersion = '2.0.0.RELEASE'
    springSecurityVersion = '5.0.3.RELEASE'
    springVersion = '5.0.4.RELEASE'
    tomcatVersion = '9.0.4'
    thymeleafVersion = '3.0.9.RELEASE'
    unbescapeVersion = '1.1.5.RELEASE'
    utilsCommonVersion = '1.0.12'
    validationApiVersion = '2.0.1.Final'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly("org.slf4j:jul-to-slf4j:1.7.25") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compileOnly "io.polyglotted:utils-common:${utilsCommonVersion}"
    compileOnly "io.polyglotted:aws-common:${awsCommonVersion}"

    compile "net.iharder:base64:${base64Version}"
    compile "com.fasterxml:classmate:${classmateVersion}"
    compile("com.github.ulisesbocchio:jasypt-spring-boot:${jasyptSpringVersion}") {
        exclude group: "org.jasypt", module: "jasypt"
    }
    compile "javax.validation:validation-api:${validationApiVersion}"
    compile("ognl:ognl:${ognlVersion}") {
        exclude group: "org.javassist", module: "javassist"
    }
    compile "org.apache.tomcat:tomcat-annotations-api:${tomcatVersion}"
    compile "org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}"
    compile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}") {
        exclude group: "org.apache.tomcat", module: "tomcat-annotations-api"
    }
    compile("org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}") {
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-core"
    }
    compile "org.attoparser:attoparser:${attoParserVersion}"
    compile("org.hibernate.validator:hibernate-validator:${hibernateVersion}") {
        exclude group: "com.fasterxml", module: "classmate"
        exclude group: "javax.validation", module: "validation-api"
        exclude group: "org.jboss.logging", module: "jboss-logging"
    }
    compile "org.jasypt:jasypt:${jasyptVersion}"
    compile "org.javassist:javassist:${javassistVersion}"
    compile "org.jboss.logging:jboss-logging:${jbossLoggingVersion}"
    compile "org.springframework:spring-jcl:${springVersion}"
    compile("org.springframework:spring-core:${springVersion}") {
        exclude group: "org.springframework", module: "spring-jcl"
    }
    compile("org.springframework:spring-beans:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
    }
    compile("org.springframework:spring-expression:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
    }
    compile("org.springframework:spring-aop:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
    }
    compile("org.springframework:spring-tx:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
    }
    compile("org.springframework:spring-web:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
    }
    compile("org.springframework:spring-context:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-expression"
        exclude group: "org.springframework", module: "spring-aop"
    }
    compile("org.springframework:spring-context-support:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-context"
    }
    compile("org.springframework:spring-webmvc:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-expression"
        exclude group: "org.springframework", module: "spring-aop"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-context"
    }
    compile("org.springframework.security:spring-security-core:${springSecurityVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-expression"
        exclude group: "org.springframework", module: "spring-aop"
        exclude group: "org.springframework", module: "spring-context"
    }
    compile("org.springframework.security:spring-security-config:${springSecurityVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-aop"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework.security", module: "spring-security-core"
    }
    compile("org.springframework.security:spring-security-web:${springSecurityVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-expression"
        exclude group: "org.springframework", module: "spring-aop"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework.security", module: "spring-security-core"
    }
    compile("org.thymeleaf:thymeleaf:${thymeleafVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "ognl", module: "ognl"
        exclude group: "org.attoparser", module: "attoparser"
        exclude group: "org.unbescape", module: "unbescape"
    }
    compile("org.thymeleaf:thymeleaf-spring5:${thymeleafVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.thymeleaf", module: "thymeleaf"
    }
    compile("org.springframework.boot:spring-boot:${springBootVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-context"
    }
    compile("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot"
    }
    compile("org.springframework.boot:spring-boot-actuator:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot"
    }
    compile("org.springframework.boot:spring-boot-actuator-autoconfigure:${springBootVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jsr310"
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework.boot", module: "spring-boot"
        exclude group: "org.springframework.boot", module: "spring-boot-autoconfigure"
        exclude group: "org.springframework.boot", module: "spring-boot-actuator"
    }
    compile "org.unbescape:unbescape:${unbescapeVersion}"

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile("junit:junit:${junitVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    testCompile("pl.pragmatists:JUnitParams:${junitParamsVersion}") {
        exclude group: "junit", module: "junit"
    }
    testCompile("org.springframework.boot:spring-boot-devtools:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot"
        exclude group: "org.springframework.boot", module: "spring-boot-autoconfigure"
    }
    testCompile("org.springframework:spring-test:${springVersion}") {
        exclude group: "org.springframework", module: "spring-core"
    }
    testCompile("org.springframework.boot:spring-boot-test:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot"
    }
    testCompile("org.springframework.boot:spring-boot-test-autoconfigure:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot-autoconfigure"
        exclude group: "org.springframework.boot", module: "spring-boot-test"
    }
}
sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

test {
    systemProperty "jasypt.encryptor.password", project.getProperty("jasypt.encryptor.password")
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
check.dependsOn jacocoTestReport

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}
signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name 'spring-common'
                packaging 'jar'
                description 'Polyglotted Common Utils'

                url 'https://github.com/polyglotted/spring-common'
                scm {
                    connection 'scm:git:git@github.com:polyglotted/spring-common.git'
                    developerConnection 'scm:git:git@github.com:polyglotted/spring-common.git'
                    url 'https://github.com/polyglotted/spring-common'
                }
                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'vshank77'
                        name 'Shankar Vasduevan'
                        email 'shankar [at] polyglotted [dot] io'
                    }
                }
            }
        }
    }
}